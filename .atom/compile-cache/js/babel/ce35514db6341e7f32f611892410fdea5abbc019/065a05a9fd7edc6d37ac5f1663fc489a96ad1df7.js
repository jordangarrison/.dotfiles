'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var PACKAGE_REGEX = /package\s+([^;]+);/;
var IMPORT_REGEX = /import\s+([^;]+);/g;

function getImports(editor) {
  var imports = [];
  editor.scan(IMPORT_REGEX, function (_ref) {
    var match = _ref.match;
    return imports.push(match[1]);
  });
  return imports;
}

function getPackage(editor) {
  var pkg = undefined;
  editor.scan(PACKAGE_REGEX, function (_ref2) {
    var match = _ref2.match;
    return pkg = match[1];
  });
  return pkg;
}

function getNamespaceGroup(namespace) {
  return namespace.substr(0, namespace.indexOf('.'));
}

function getPackageDefinitionEndPoint(editor) {
  var point = undefined;
  editor.scan(PACKAGE_REGEX, function (_ref3) {
    var range = _ref3.range;
    return point = range.end.traverse([1, 0]);
  });
  return point;
}

function getLastImportEndPoint(editor) {
  var point = undefined;
  editor.scan(IMPORT_REGEX, function (_ref4) {
    var range = _ref4.range;
    return point = range.end.traverse([1, 0]);
  });
  return point;
}

function denamespace(klass) {
  return klass.substr(klass.lastIndexOf('.') + 1);
}

function packagify(klass) {
  return klass.substr(0, klass.lastIndexOf('.'));
}

exports.getImports = getImports;
exports.getPackage = getPackage;
exports.getNamespaceGroup = getNamespaceGroup;
exports.getPackageDefinitionEndPoint = getPackageDefinitionEndPoint;
exports.getLastImportEndPoint = getLastImportEndPoint;
exports.denamespace = denamespace;
exports.packagify = packagify;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pnYXJyaXNvbi8uYXRvbS9wYWNrYWdlcy9qYXZhLWltcG9ydC13aXovbGliL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7OztBQUVaLElBQU0sYUFBYSxHQUFHLG9CQUFvQixDQUFDO0FBQzNDLElBQU0sWUFBWSxHQUFHLG9CQUFvQixDQUFDOztBQUUxQyxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ25CLFFBQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFVBQUMsSUFBUztRQUFQLEtBQUssR0FBUCxJQUFTLENBQVAsS0FBSztXQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQUEsQ0FBQyxDQUFDO0FBQ2pFLFNBQU8sT0FBTyxDQUFDO0NBQ2hCOztBQUVELFNBQVMsVUFBVSxDQUFDLE1BQU0sRUFBRTtBQUMxQixNQUFJLEdBQUcsWUFBQSxDQUFDO0FBQ1IsUUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsVUFBQyxLQUFTO1FBQVAsS0FBSyxHQUFQLEtBQVMsQ0FBUCxLQUFLO1dBQVEsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FBQyxDQUFDLENBQUM7QUFDNUQsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFRCxTQUFTLGlCQUFpQixDQUFDLFNBQVMsRUFBRTtBQUNwQyxTQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUNwRDs7QUFFRCxTQUFTLDRCQUE0QixDQUFDLE1BQU0sRUFBRTtBQUM1QyxNQUFJLEtBQUssWUFBQSxDQUFDO0FBQ1YsUUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsVUFBQyxLQUFTO1FBQVAsS0FBSyxHQUFQLEtBQVMsQ0FBUCxLQUFLO1dBQVEsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO0dBQUMsQ0FBQyxDQUFDO0FBQ2xGLFNBQU8sS0FBSyxDQUFDO0NBQ2Q7O0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUU7QUFDckMsTUFBSSxLQUFLLFlBQUEsQ0FBQztBQUNWLFFBQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFVBQUMsS0FBUztRQUFQLEtBQUssR0FBUCxLQUFTLENBQVAsS0FBSztXQUFRLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQztHQUFDLENBQUMsQ0FBQztBQUNqRixTQUFPLEtBQUssQ0FBQztDQUNkOztBQUVELFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtBQUMxQixTQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUNqRDs7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUU7QUFDeEIsU0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDaEQ7O1FBR0MsVUFBVSxHQUFWLFVBQVU7UUFDVixVQUFVLEdBQVYsVUFBVTtRQUNWLGlCQUFpQixHQUFqQixpQkFBaUI7UUFDakIsNEJBQTRCLEdBQTVCLDRCQUE0QjtRQUM1QixxQkFBcUIsR0FBckIscUJBQXFCO1FBQ3JCLFdBQVcsR0FBWCxXQUFXO1FBQ1gsU0FBUyxHQUFULFNBQVMiLCJmaWxlIjoiL2hvbWUvamdhcnJpc29uLy5hdG9tL3BhY2thZ2VzL2phdmEtaW1wb3J0LXdpei9saWIvaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5jb25zdCBQQUNLQUdFX1JFR0VYID0gL3BhY2thZ2VcXHMrKFteO10rKTsvO1xuY29uc3QgSU1QT1JUX1JFR0VYID0gL2ltcG9ydFxccysoW147XSspOy9nO1xuXG5mdW5jdGlvbiBnZXRJbXBvcnRzKGVkaXRvcikge1xuICBjb25zdCBpbXBvcnRzID0gW107XG4gIGVkaXRvci5zY2FuKElNUE9SVF9SRUdFWCwgKHsgbWF0Y2ggfSkgPT4gaW1wb3J0cy5wdXNoKG1hdGNoWzFdKSk7XG4gIHJldHVybiBpbXBvcnRzO1xufVxuXG5mdW5jdGlvbiBnZXRQYWNrYWdlKGVkaXRvcikge1xuICBsZXQgcGtnO1xuICBlZGl0b3Iuc2NhbihQQUNLQUdFX1JFR0VYLCAoeyBtYXRjaCB9KSA9PiAocGtnID0gbWF0Y2hbMV0pKTtcbiAgcmV0dXJuIHBrZztcbn1cblxuZnVuY3Rpb24gZ2V0TmFtZXNwYWNlR3JvdXAobmFtZXNwYWNlKSB7XG4gIHJldHVybiBuYW1lc3BhY2Uuc3Vic3RyKDAsIG5hbWVzcGFjZS5pbmRleE9mKCcuJykpO1xufVxuXG5mdW5jdGlvbiBnZXRQYWNrYWdlRGVmaW5pdGlvbkVuZFBvaW50KGVkaXRvcikge1xuICBsZXQgcG9pbnQ7XG4gIGVkaXRvci5zY2FuKFBBQ0tBR0VfUkVHRVgsICh7IHJhbmdlIH0pID0+IChwb2ludCA9IHJhbmdlLmVuZC50cmF2ZXJzZShbIDEsIDAgXSkpKTtcbiAgcmV0dXJuIHBvaW50O1xufVxuXG5mdW5jdGlvbiBnZXRMYXN0SW1wb3J0RW5kUG9pbnQoZWRpdG9yKSB7XG4gIGxldCBwb2ludDtcbiAgZWRpdG9yLnNjYW4oSU1QT1JUX1JFR0VYLCAoeyByYW5nZSB9KSA9PiAocG9pbnQgPSByYW5nZS5lbmQudHJhdmVyc2UoWyAxLCAwIF0pKSk7XG4gIHJldHVybiBwb2ludDtcbn1cblxuZnVuY3Rpb24gZGVuYW1lc3BhY2Uoa2xhc3MpIHtcbiAgcmV0dXJuIGtsYXNzLnN1YnN0cihrbGFzcy5sYXN0SW5kZXhPZignLicpICsgMSk7XG59XG5cbmZ1bmN0aW9uIHBhY2thZ2lmeShrbGFzcykge1xuICByZXR1cm4ga2xhc3Muc3Vic3RyKDAsIGtsYXNzLmxhc3RJbmRleE9mKCcuJykpO1xufVxuXG5leHBvcnQge1xuICBnZXRJbXBvcnRzLFxuICBnZXRQYWNrYWdlLFxuICBnZXROYW1lc3BhY2VHcm91cCxcbiAgZ2V0UGFja2FnZURlZmluaXRpb25FbmRQb2ludCxcbiAgZ2V0TGFzdEltcG9ydEVuZFBvaW50LFxuICBkZW5hbWVzcGFjZSxcbiAgcGFja2FnaWZ5XG59O1xuIl19