'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = {

  BUSY_COLLECT_ID: 'java-classpath-registry.collect',
  BUSY_COLLECT_DESCRIPTION: 'Collecting Java Classes...',

  deactivate: function deactivate() {
    this.cache && this.cache.dispose();
  },

  collect: function collect() {
    var _this = this;

    var _require = require('./collector');

    var collect = _require.collect;

    this.registry._clear();
    this.busyRegistry && this.busyRegistry.begin(this.BUSY_COLLECT_ID, this.BUSY_COLLECT_DESCRIPTION);

    this.collectPromise = Promise.resolve().then(function () {
      return collect(_this.registry, _this.cache);
    }).then(function () {
      _this.collectPromise = null;
      _this.busyRegistry && _this.busyRegistry.end(_this.BUSY_COLLECT_ID, true);
    })['catch'](function (err) {
      _this.collectPromise = null;
      atom.notifications.addError('Failed to collect java classes', {
        detail: err.message,
        stack: err.stack,
        dismissable: true
      });
      _this.busyRegistry && _this.busyRegistry.end(_this.BUSY_COLLECT_ID, false);
    });
  },

  /**
   * Called when someone actually is interested in the classpath registry.
   * Initialize and do all work here. This reduced load times and doesn't do
   * any work if we might not need it.
   */
  provide: function provide() {
    var _this2 = this;

    require('atom-package-deps').install('java-classpath-registry');
    atom.commands.add('atom-workspace', 'java-classpath-registry:refresh', function () {
      return _this2.collect();
    });

    if (!this.cache) {
      var Cache = require('./cache');
      this.cache = new Cache();
    }

    if (!this.registry) {
      var Registry = require('./registry');
      this.registry = new Registry();
      this.collect();
    }

    return this.registry;
  },

  consumeBusy: function consumeBusy(registry) {
    this.busyRegistry = registry;
    if (this.collectPromise) {
      this.busyRegistry.begin(this.BUSY_COLLECT_ID, this.BUSY_COLLECT_DESCRIPTION);
    }
  }

};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pnYXJyaXNvbi8uYXRvbS9wYWNrYWdlcy9qYXZhLWNsYXNzcGF0aC1yZWdpc3RyeS9saWIvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7O3FCQUVHOztBQUViLGlCQUFlLEVBQUUsaUNBQWlDO0FBQ2xELDBCQUF3QixFQUFFLDRCQUE0Qjs7QUFFdEQsWUFBVSxFQUFBLHNCQUFHO0FBQ1gsUUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0dBQ3BDOztBQUVELFNBQU8sRUFBQSxtQkFBRzs7O21CQUNZLE9BQU8sQ0FBQyxhQUFhLENBQUM7O1FBQWxDLE9BQU8sWUFBUCxPQUFPOztBQUVmLFFBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDdkIsUUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDOztBQUVsRyxRQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FDcEMsSUFBSSxDQUFDLFlBQU07QUFDVixhQUFPLE9BQU8sQ0FBQyxNQUFLLFFBQVEsRUFBRSxNQUFLLEtBQUssQ0FBQyxDQUFDO0tBQzNDLENBQUMsQ0FDRCxJQUFJLENBQUMsWUFBTTtBQUNWLFlBQUssY0FBYyxHQUFHLElBQUksQ0FBQztBQUMzQixZQUFLLFlBQVksSUFBSSxNQUFLLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBSyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDeEUsQ0FBQyxTQUNJLENBQUMsVUFBQSxHQUFHLEVBQUk7QUFDWixZQUFLLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFDM0IsVUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsZ0NBQWdDLEVBQUU7QUFDNUQsY0FBTSxFQUFFLEdBQUcsQ0FBQyxPQUFPO0FBQ25CLGFBQUssRUFBRSxHQUFHLENBQUMsS0FBSztBQUNoQixtQkFBVyxFQUFFLElBQUk7T0FDbEIsQ0FBQyxDQUFDO0FBQ0gsWUFBSyxZQUFZLElBQUksTUFBSyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQUssZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3pFLENBQUMsQ0FBQztHQUNOOzs7Ozs7O0FBT0QsU0FBTyxFQUFBLG1CQUFHOzs7QUFDUixXQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUNoRSxRQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxpQ0FBaUMsRUFBRTthQUFNLE9BQUssT0FBTyxFQUFFO0tBQUEsQ0FBQyxDQUFDOztBQUU3RixRQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNmLFVBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxVQUFJLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7S0FDMUI7O0FBRUQsUUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDbEIsVUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3ZDLFVBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUMvQixVQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDaEI7O0FBRUQsV0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0dBQ3RCOztBQUVELGFBQVcsRUFBQSxxQkFBQyxRQUFRLEVBQUU7QUFDcEIsUUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUM7QUFDN0IsUUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQ3ZCLFVBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7S0FDOUU7R0FDRjs7Q0FFRiIsImZpbGUiOiIvaG9tZS9qZ2Fycmlzb24vLmF0b20vcGFja2FnZXMvamF2YS1jbGFzc3BhdGgtcmVnaXN0cnkvbGliL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIEJVU1lfQ09MTEVDVF9JRDogJ2phdmEtY2xhc3NwYXRoLXJlZ2lzdHJ5LmNvbGxlY3QnLFxuICBCVVNZX0NPTExFQ1RfREVTQ1JJUFRJT046ICdDb2xsZWN0aW5nIEphdmEgQ2xhc3Nlcy4uLicsXG5cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICB0aGlzLmNhY2hlICYmIHRoaXMuY2FjaGUuZGlzcG9zZSgpO1xuICB9LFxuXG4gIGNvbGxlY3QoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0IH0gPSByZXF1aXJlKCcuL2NvbGxlY3RvcicpO1xuXG4gICAgdGhpcy5yZWdpc3RyeS5fY2xlYXIoKTtcbiAgICB0aGlzLmJ1c3lSZWdpc3RyeSAmJiB0aGlzLmJ1c3lSZWdpc3RyeS5iZWdpbih0aGlzLkJVU1lfQ09MTEVDVF9JRCwgdGhpcy5CVVNZX0NPTExFQ1RfREVTQ1JJUFRJT04pO1xuXG4gICAgdGhpcy5jb2xsZWN0UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0KHRoaXMucmVnaXN0cnksIHRoaXMuY2FjaGUpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5jb2xsZWN0UHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYnVzeVJlZ2lzdHJ5ICYmIHRoaXMuYnVzeVJlZ2lzdHJ5LmVuZCh0aGlzLkJVU1lfQ09MTEVDVF9JRCwgdHJ1ZSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHRoaXMuY29sbGVjdFByb21pc2UgPSBudWxsO1xuICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoJ0ZhaWxlZCB0byBjb2xsZWN0IGphdmEgY2xhc3NlcycsIHtcbiAgICAgICAgICBkZXRhaWw6IGVyci5tZXNzYWdlLFxuICAgICAgICAgIHN0YWNrOiBlcnIuc3RhY2ssXG4gICAgICAgICAgZGlzbWlzc2FibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYnVzeVJlZ2lzdHJ5ICYmIHRoaXMuYnVzeVJlZ2lzdHJ5LmVuZCh0aGlzLkJVU1lfQ09MTEVDVF9JRCwgZmFsc2UpO1xuICAgICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHNvbWVvbmUgYWN0dWFsbHkgaXMgaW50ZXJlc3RlZCBpbiB0aGUgY2xhc3NwYXRoIHJlZ2lzdHJ5LlxuICAgKiBJbml0aWFsaXplIGFuZCBkbyBhbGwgd29yayBoZXJlLiBUaGlzIHJlZHVjZWQgbG9hZCB0aW1lcyBhbmQgZG9lc24ndCBkb1xuICAgKiBhbnkgd29yayBpZiB3ZSBtaWdodCBub3QgbmVlZCBpdC5cbiAgICovXG4gIHByb3ZpZGUoKSB7XG4gICAgcmVxdWlyZSgnYXRvbS1wYWNrYWdlLWRlcHMnKS5pbnN0YWxsKCdqYXZhLWNsYXNzcGF0aC1yZWdpc3RyeScpO1xuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsICdqYXZhLWNsYXNzcGF0aC1yZWdpc3RyeTpyZWZyZXNoJywgKCkgPT4gdGhpcy5jb2xsZWN0KCkpO1xuXG4gICAgaWYgKCF0aGlzLmNhY2hlKSB7XG4gICAgICBjb25zdCBDYWNoZSA9IHJlcXVpcmUoJy4vY2FjaGUnKTtcbiAgICAgIHRoaXMuY2FjaGUgPSBuZXcgQ2FjaGUoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucmVnaXN0cnkpIHtcbiAgICAgIGNvbnN0IFJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9yZWdpc3RyeScpO1xuICAgICAgdGhpcy5yZWdpc3RyeSA9IG5ldyBSZWdpc3RyeSgpO1xuICAgICAgdGhpcy5jb2xsZWN0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVnaXN0cnk7XG4gIH0sXG5cbiAgY29uc3VtZUJ1c3kocmVnaXN0cnkpIHtcbiAgICB0aGlzLmJ1c3lSZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICAgIGlmICh0aGlzLmNvbGxlY3RQcm9taXNlKSB7XG4gICAgICB0aGlzLmJ1c3lSZWdpc3RyeS5iZWdpbih0aGlzLkJVU1lfQ09MTEVDVF9JRCwgdGhpcy5CVVNZX0NPTExFQ1RfREVTQ1JJUFRJT04pO1xuICAgIH1cbiAgfVxuXG59O1xuIl19