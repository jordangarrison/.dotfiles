'use babel';
/* global atom, expect, describe, beforeEach, it, waitsForPromise, waitsFor, runs, advanceClock, jasmine */

var COMPLETION_DELAY = 100;

describe('autocomplete-paths', function () {
  var _ref = [];
  var editor = _ref[0];
  var provider = _ref[1];

  var getSuggestions = function getSuggestions() {
    var cursor = editor.getLastCursor();
    var start = cursor.getBeginningOfCurrentWordBufferPosition();
    var end = cursor.getBufferPosition();
    var prefix = editor.getTextInRange([start, end]);
    var request = {
      editor: editor,
      bufferPosition: end,
      scopeDescriptor: cursor.getScopeDescriptor(),
      prefix: prefix
    };
    return provider.getSuggestions(request);
  };

  beforeEach(function () {
    atom.config.set('autocomplete-plus.enableAutoActivation', true);
    atom.config.set('autocomplete-plus.autoActivationDelay', COMPLETION_DELAY);

    var workspaceElement = atom.views.getView(atom.workspace);
    jasmine.attachToDOM(workspaceElement);

    waitsForPromise(function () {
      return Promise.all([atom.workspace.open('sample.js').then(function (e) {
        editor = e;
      }), atom.packages.activatePackage('language-javascript'), atom.packages.activatePackage('autocomplete-paths'), atom.packages.activatePackage('autocomplete-plus'), atom.packages.activatePackage('status-bar')]);
    });
    runs(function () {
      provider = atom.packages.getActivePackage('autocomplete-paths').mainModule.getProvider();
    });
    waitsFor(function () {
      return provider.isReady();
    });
  });

  it('triggers when text before cursor matches one of the scopes', function () {
    runs(function () {
      editor.setText('require(\'t');
      editor.setCursorBufferPosition([0, Infinity]);
    });
    waitsForPromise(function () {
      return getSuggestions().then(function (suggestions) {
        expect(suggestions).toHaveLength(2);
      });
    });
  });

  it('only displays files relevant to the matching scope', function () {
    waitsForPromise(function () {
      return atom.packages.activatePackage('language-javascript');
    });
    runs(function () {
      editor.setText('require(\'t');
      editor.setCursorBufferPosition([0, Infinity]);
    });
    waitsForPromise(function () {
      return getSuggestions().then(function (suggestions) {
        expect(suggestions).toHaveLength(2);
        expect(suggestions[0].displayText).toBe('somedir/testfile.js');
        expect(suggestions[1].displayText).toBe('somedir/testdir/nested-test-file.js');
      });
    });
  });

  it('removes the extension when accepting a JS import suggestion', function () {
    var editorView = undefined;
    waitsForPromise(function () {
      return atom.packages.activatePackage('language-javascript');
    });
    runs(function () {
      editorView = atom.views.getView(editor);
      editor.setText('require(\'');
      editor.moveToBottom();
      editor.insertText('t');
      editor.insertText('e');
      editor.insertText('s');

      advanceClock(COMPLETION_DELAY);
    });
    waitsFor('autocomplete view to appear', 1000, function () {
      return editorView.querySelector('.autocomplete-plus');
    });
    runs(function () {
      atom.commands.dispatch(editorView, 'autocomplete-plus:confirm');

      expect(editor.getText()).toEqual('require(\'./somedir/testfile');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,