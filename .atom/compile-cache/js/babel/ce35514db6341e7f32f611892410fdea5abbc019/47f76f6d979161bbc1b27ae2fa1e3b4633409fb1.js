Object.defineProperty(exports, '__esModule', {
  value: true
});

var _utilTokens = require('../util/tokens');

'use babel';

function stepBack(_ref, tokens) {
  var row = _ref.row;
  var col = _ref.col;

  col--;
  if (col < 0) {
    row--;
    if (row < 0) {
      return false;
    }
    col = tokens[row].length - 1;
  }
  return { row: row, col: col };
}

function scopeBreak(token) {
  return token.scopes.includes('entity.name.function.java') && token.scopes.includes('meta.method.identifier.java');
}

function getMethodLocalFields(tokens, editor, bufferPosition) {
  if (bufferPosition.row >= tokens.length) {
    // There's no tokens for this row yet (probably because editing close to the
    // end of the file, and the token cache hasn't updated yet).
    return [];
  }

  var pos = {
    row: bufferPosition.row,
    col: tokens[bufferPosition.row].length - 1
  };
  var memo = {};
  var fields = [];
  while (!scopeBreak(tokens[pos.row][pos.col])) {
    var token = tokens[pos.row][pos.col];
    var inc = token.scopes.includes.bind(token.scopes);

    if ((0, _utilTokens.tokenIsSquareBrackets)(token)) {
      memo.brackets = memo.brackets ? memo.brackets + 1 : 1;
    }

    if ((inc('meta.definition.variable.java') || inc('meta.method.identifier.java')) && (0, _utilTokens.tokenIsStorageType)(token) && memo.name) {
      if (!memo.brackets) {
        memo.type = this.getFullyQualifiedClass(editor, token.value) || token.value;
      } else {
        // Doesn't support any more explicit autocompletion for this... yet! */
        memo.type = '' + token.value + '[]'.repeat(memo.brackets / 2);
      }
    }

    if ((inc('meta.definition.variable.java') || inc('meta.method.identifier.java')) && (0, _utilTokens.tokenIsVariableName)(token)) {
      memo.name = token.value;
    }

    if (memo.type && memo.name) {
      fields.push(memo);
      memo = {};
    }

    pos = stepBack(pos, tokens);
    if (false === pos) {
      // Stepped backwards through file and no function definition found
      return [];
    }
  }

  return fields;
}

exports.getMethodLocalFields = getMethodLocalFields;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pnYXJyaXNvbi8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtamF2YS1taW51cy9saWIvZW50cnlmaW5kZXJzL21ldGhvZC1sb2NhbC1maWVsZHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OzswQkFFK0UsZ0JBQWdCOztBQUYvRixXQUFXLENBQUM7O0FBSVosU0FBUyxRQUFRLENBQUMsSUFBWSxFQUFFLE1BQU0sRUFBRTtNQUFwQixHQUFHLEdBQUwsSUFBWSxDQUFWLEdBQUc7TUFBRSxHQUFHLEdBQVYsSUFBWSxDQUFMLEdBQUc7O0FBQzFCLEtBQUcsRUFBRSxDQUFDO0FBQ04sTUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO0FBQ1gsT0FBRyxFQUFFLENBQUM7QUFDTixRQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7QUFDWCxhQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0QsT0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0dBQzlCO0FBQ0QsU0FBTyxFQUFFLEdBQUcsRUFBSCxHQUFHLEVBQUUsR0FBRyxFQUFILEdBQUcsRUFBRSxDQUFDO0NBQ3JCOztBQUVELFNBQVMsVUFBVSxDQUFDLEtBQUssRUFBRTtBQUN6QixTQUNFLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLElBQ2xELEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQ3BEO0NBQ0g7O0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRTtBQUM1RCxNQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTs7O0FBR3ZDLFdBQU8sRUFBRSxDQUFDO0dBQ1g7O0FBRUQsTUFBSSxHQUFHLEdBQUc7QUFDUixPQUFHLEVBQUUsY0FBYyxDQUFDLEdBQUc7QUFDdkIsT0FBRyxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7R0FDM0MsQ0FBQztBQUNGLE1BQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNkLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNsQixTQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7QUFDNUMsUUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkMsUUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFckQsUUFBSSx1Q0FBc0IsS0FBSyxDQUFDLEVBQUU7QUFDaEMsVUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN2RDs7QUFFRCxRQUFJLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLElBQUksR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUEsSUFDM0Usb0NBQW1CLEtBQUssQ0FBQyxJQUN6QixJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2IsVUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDbEIsWUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO09BQzdFLE1BQU07O0FBRUwsWUFBSSxDQUFDLElBQUksUUFBTSxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQUFBRSxDQUFDO09BQy9EO0tBQ0Y7O0FBRUQsUUFBSSxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBLElBQzNFLHFDQUFvQixLQUFLLENBQUMsRUFBRTtBQUM5QixVQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7S0FDekI7O0FBRUQsUUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDMUIsWUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQixVQUFJLEdBQUcsRUFBRSxDQUFDO0tBQ1g7O0FBRUQsT0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUIsUUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFOztBQUVqQixhQUFPLEVBQUUsQ0FBQztLQUNYO0dBQ0Y7O0FBRUQsU0FBTyxNQUFNLENBQUM7Q0FDZjs7UUFFUSxvQkFBb0IsR0FBcEIsb0JBQW9CIiwiZmlsZSI6Ii9ob21lL2pnYXJyaXNvbi8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtamF2YS1taW51cy9saWIvZW50cnlmaW5kZXJzL21ldGhvZC1sb2NhbC1maWVsZHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuaW1wb3J0IHsgdG9rZW5Jc1NxdWFyZUJyYWNrZXRzLCB0b2tlbklzU3RvcmFnZVR5cGUsIHRva2VuSXNWYXJpYWJsZU5hbWUgfSBmcm9tICcuLi91dGlsL3Rva2Vucyc7XG5cbmZ1bmN0aW9uIHN0ZXBCYWNrKHsgcm93LCBjb2wgfSwgdG9rZW5zKSB7XG4gIGNvbC0tO1xuICBpZiAoY29sIDwgMCkge1xuICAgIHJvdy0tO1xuICAgIGlmIChyb3cgPCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbCA9IHRva2Vuc1tyb3ddLmxlbmd0aCAtIDE7XG4gIH1cbiAgcmV0dXJuIHsgcm93LCBjb2wgfTtcbn1cblxuZnVuY3Rpb24gc2NvcGVCcmVhayh0b2tlbikge1xuICByZXR1cm4gKFxuICAgIHRva2VuLnNjb3Blcy5pbmNsdWRlcygnZW50aXR5Lm5hbWUuZnVuY3Rpb24uamF2YScpICYmXG4gICAgdG9rZW4uc2NvcGVzLmluY2x1ZGVzKCdtZXRhLm1ldGhvZC5pZGVudGlmaWVyLmphdmEnKVxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRNZXRob2RMb2NhbEZpZWxkcyh0b2tlbnMsIGVkaXRvciwgYnVmZmVyUG9zaXRpb24pIHtcbiAgaWYgKGJ1ZmZlclBvc2l0aW9uLnJvdyA+PSB0b2tlbnMubGVuZ3RoKSB7XG4gICAgLy8gVGhlcmUncyBubyB0b2tlbnMgZm9yIHRoaXMgcm93IHlldCAocHJvYmFibHkgYmVjYXVzZSBlZGl0aW5nIGNsb3NlIHRvIHRoZVxuICAgIC8vIGVuZCBvZiB0aGUgZmlsZSwgYW5kIHRoZSB0b2tlbiBjYWNoZSBoYXNuJ3QgdXBkYXRlZCB5ZXQpLlxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGxldCBwb3MgPSB7XG4gICAgcm93OiBidWZmZXJQb3NpdGlvbi5yb3csXG4gICAgY29sOiB0b2tlbnNbYnVmZmVyUG9zaXRpb24ucm93XS5sZW5ndGggLSAxXG4gIH07XG4gIGxldCBtZW1vID0ge307XG4gIGNvbnN0IGZpZWxkcyA9IFtdO1xuICB3aGlsZSAoIXNjb3BlQnJlYWsodG9rZW5zW3Bvcy5yb3ddW3Bvcy5jb2xdKSkge1xuICAgIGNvbnN0IHRva2VuID0gdG9rZW5zW3Bvcy5yb3ddW3Bvcy5jb2xdO1xuICAgIGNvbnN0IGluYyA9IHRva2VuLnNjb3Blcy5pbmNsdWRlcy5iaW5kKHRva2VuLnNjb3Blcyk7XG5cbiAgICBpZiAodG9rZW5Jc1NxdWFyZUJyYWNrZXRzKHRva2VuKSkge1xuICAgICAgbWVtby5icmFja2V0cyA9IG1lbW8uYnJhY2tldHMgPyBtZW1vLmJyYWNrZXRzICsgMSA6IDE7XG4gICAgfVxuXG4gICAgaWYgKChpbmMoJ21ldGEuZGVmaW5pdGlvbi52YXJpYWJsZS5qYXZhJykgfHwgaW5jKCdtZXRhLm1ldGhvZC5pZGVudGlmaWVyLmphdmEnKSkgJiZcbiAgICAgICAgdG9rZW5Jc1N0b3JhZ2VUeXBlKHRva2VuKSAmJlxuICAgICAgICBtZW1vLm5hbWUpIHtcbiAgICAgIGlmICghbWVtby5icmFja2V0cykge1xuICAgICAgICBtZW1vLnR5cGUgPSB0aGlzLmdldEZ1bGx5UXVhbGlmaWVkQ2xhc3MoZWRpdG9yLCB0b2tlbi52YWx1ZSkgfHwgdG9rZW4udmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEb2Vzbid0IHN1cHBvcnQgYW55IG1vcmUgZXhwbGljaXQgYXV0b2NvbXBsZXRpb24gZm9yIHRoaXMuLi4geWV0ISAqL1xuICAgICAgICBtZW1vLnR5cGUgPSBgJHt0b2tlbi52YWx1ZX0keydbXScucmVwZWF0KG1lbW8uYnJhY2tldHMgLyAyKX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgoaW5jKCdtZXRhLmRlZmluaXRpb24udmFyaWFibGUuamF2YScpIHx8IGluYygnbWV0YS5tZXRob2QuaWRlbnRpZmllci5qYXZhJykpICYmXG4gICAgICAgIHRva2VuSXNWYXJpYWJsZU5hbWUodG9rZW4pKSB7XG4gICAgICBtZW1vLm5hbWUgPSB0b2tlbi52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAobWVtby50eXBlICYmIG1lbW8ubmFtZSkge1xuICAgICAgZmllbGRzLnB1c2gobWVtbyk7XG4gICAgICBtZW1vID0ge307XG4gICAgfVxuXG4gICAgcG9zID0gc3RlcEJhY2socG9zLCB0b2tlbnMpO1xuICAgIGlmIChmYWxzZSA9PT0gcG9zKSB7XG4gICAgICAvLyBTdGVwcGVkIGJhY2t3YXJkcyB0aHJvdWdoIGZpbGUgYW5kIG5vIGZ1bmN0aW9uIGRlZmluaXRpb24gZm91bmRcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmllbGRzO1xufVxuXG5leHBvcnQgeyBnZXRNZXRob2RMb2NhbEZpZWxkcyB9O1xuIl19