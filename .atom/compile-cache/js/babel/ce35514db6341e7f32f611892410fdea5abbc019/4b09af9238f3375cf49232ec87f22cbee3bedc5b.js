function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

require('./spec-helpers');

var _libLogger = require('../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var _libWerkzeug = require('../lib/werkzeug');

var _libWerkzeug2 = _interopRequireDefault(_libWerkzeug);

describe('Logger', function () {
  var logger = undefined,
      counts = undefined;

  beforeEach(function () {
    logger = new _libLogger2['default']();
  });

  describe('getMessages', function () {
    beforeEach(function () {
      logger.info();
      logger.warning();
      logger.error();
    });

    it('verifies no messages filtered when logging level set to info', function () {
      atom.config.set('latex.loggingLevel', 'info');
      counts = _lodash2['default'].countBy(logger.getMessages(), 'type');

      expect(counts.error).toBeDefined();
      expect(counts.warning).toBeDefined();
      expect(counts.info).toBeDefined();
    });

    it('verifies info messages filtered when logging level set to warning', function () {
      atom.config.set('latex.loggingLevel', 'warning');
      counts = _lodash2['default'].countBy(logger.getMessages(), 'type');

      expect(counts.error).toBeDefined();
      expect(counts.warning).toBeDefined();
      expect(counts.info).toBeUndefined();
    });

    it('verifies warning and info messages filtered when logging level set to error', function () {
      atom.config.set('latex.loggingLevel', 'error');
      counts = _lodash2['default'].countBy(logger.getMessages(), 'type');

      expect(counts.error).toBeDefined();
      expect(counts.warning).toBeUndefined();
      expect(counts.info).toBeUndefined();
    });

    it('verifies no messages filtered when useFilters is false', function () {
      atom.config.set('latex.loggingLevel', 'error');
      counts = _lodash2['default'].countBy(logger.getMessages(false), 'type');

      expect(counts.error).toBeDefined();
      expect(counts.warning).toBeDefined();
      expect(counts.info).toBeDefined();
    });
  });

  describe('messageTypeIsVisible', function () {
    it('verifies messageTypeIsVisible is true for all levels when logging level set to info', function () {
      atom.config.set('latex.loggingLevel', 'info');

      expect(logger.messageTypeIsVisible('info')).toBe(true);
      expect(logger.messageTypeIsVisible('warning')).toBe(true);
      expect(logger.messageTypeIsVisible('error')).toBe(true);
    });

    it('verifies messageTypeIsVisible is false for info when logging level set to warning', function () {
      atom.config.set('latex.loggingLevel', 'warning');

      expect(logger.messageTypeIsVisible('info')).toBe(false);
      expect(logger.messageTypeIsVisible('warning')).toBe(true);
      expect(logger.messageTypeIsVisible('error')).toBe(true);
    });

    it('verifies messageTypeIsVisible is false for info when logging level set to warning', function () {
      atom.config.set('latex.loggingLevel', 'error');

      expect(logger.messageTypeIsVisible('info')).toBe(false);
      expect(logger.messageTypeIsVisible('warning')).toBe(false);
      expect(logger.messageTypeIsVisible('error')).toBe(true);
    });
  });

  describe('sync', function () {
    var logDock = undefined;

    function initializeSpies(filePath, position) {
      logDock = jasmine.createSpyObj('LogDock', ['update']);
      spyOn(logger, 'show').andCallFake(function () {
        return Promise.resolve(logDock);
      });
      spyOn(_libWerkzeug2['default'], 'getEditorDetails').andReturn({ filePath: filePath, position: position });
    }

    it('silently does nothing when the current editor is transient', function () {
      initializeSpies(null, null);

      waitsForPromise(function () {
        return logger.sync();
      });

      runs(function () {
        expect(logger.show).not.toHaveBeenCalled();
        expect(logDock.update).not.toHaveBeenCalled();
      });
    });

    it('shows and updates the log panel with the file path and position', function () {
      var filePath = 'file.tex';
      var position = [[0, 0], [0, 10]];

      initializeSpies(filePath, position);

      waitsForPromise(function () {
        return logger.sync();
      });

      runs(function () {
        expect(logger.show).toHaveBeenCalled();
        expect(logDock.update).toHaveBeenCalledWith({ filePath: filePath, position: position });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,