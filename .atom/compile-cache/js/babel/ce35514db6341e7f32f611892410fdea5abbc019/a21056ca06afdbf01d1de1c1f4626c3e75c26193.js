function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _specHelpers = require('./spec-helpers');

var _specHelpers2 = _interopRequireDefault(_specHelpers);

describe('Latex', function () {
  beforeEach(function () {
    waitsForPromise(function () {
      return _specHelpers2['default'].activatePackages();
    });
  });

  describe('initialize', function () {
    it('initializes all properties', function () {
      expect(latex.logger).toBeDefined();
      expect(latex.opener).toBeDefined();
      expect(latex.process).toBeDefined();
    });
  });

  describe('getDefaultLogger', function () {
    it('returns an instance of DefaultLogger', function () {
      var defaultLogger = latex.getDefaultLogger();

      expect(defaultLogger.constructor.name).toBe('DefaultLogger');
    });
  });

  describe('Logger proxy', function () {
    var logger = undefined;

    beforeEach(function () {
      logger = jasmine.createSpyObj('MockLogger', ['error', 'warning', 'info']);
      latex.setLogger(logger);
      latex.createLogProxy();
    });

    it('correctly proxies error to error', function () {
      var statusCode = 0;
      var result = { foo: 'bar' };
      var builder = { run: function run() {
          return '';
        } };
      latex.log.error(statusCode, result, builder);

      expect(logger.error).toHaveBeenCalledWith(statusCode, result, builder);
    });

    it('correctly proxies warning to warning', function () {
      var message = 'foo';
      latex.log.warning(message);

      expect(logger.warning).toHaveBeenCalledWith(message);
    });

    it('correctly proxies info to info', function () {
      var message = 'foo';
      latex.log.info(message);

      expect(logger.info).toHaveBeenCalledWith(message);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pnYXJyaXNvbi8uYXRvbS9wYWNrYWdlcy9sYXRleC9zcGVjL2xhdGV4LXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OzsyQkFFb0IsZ0JBQWdCOzs7O0FBRXBDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsWUFBTTtBQUN0QixZQUFVLENBQUMsWUFBTTtBQUNmLG1CQUFlLENBQUMsWUFBTTtBQUNwQixhQUFPLHlCQUFRLGdCQUFnQixFQUFFLENBQUE7S0FDbEMsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxDQUFBOztBQUVGLFVBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTtBQUMzQixNQUFFLENBQUMsNEJBQTRCLEVBQUUsWUFBTTtBQUNyQyxZQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2xDLFlBQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDbEMsWUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtLQUNwQyxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsVUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQU07QUFDakMsTUFBRSxDQUFDLHNDQUFzQyxFQUFFLFlBQU07QUFDL0MsVUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUE7O0FBRTlDLFlBQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQTtLQUM3RCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsVUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFNO0FBQzdCLFFBQUksTUFBTSxZQUFBLENBQUE7O0FBRVYsY0FBVSxDQUFDLFlBQU07QUFDZixZQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7QUFDekUsV0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN2QixXQUFLLENBQUMsY0FBYyxFQUFFLENBQUE7S0FDdkIsQ0FBQyxDQUFBOztBQUVGLE1BQUUsQ0FBQyxrQ0FBa0MsRUFBRSxZQUFNO0FBQzNDLFVBQU0sVUFBVSxHQUFHLENBQUMsQ0FBQTtBQUNwQixVQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQTtBQUM3QixVQUFNLE9BQU8sR0FBRyxFQUFFLEdBQUcsRUFBQyxlQUFHO0FBQUUsaUJBQU8sRUFBRSxDQUFBO1NBQUUsRUFBRSxDQUFBO0FBQ3hDLFdBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUE7O0FBRTVDLFlBQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQTtLQUN2RSxDQUFDLENBQUE7O0FBRUYsTUFBRSxDQUFDLHNDQUFzQyxFQUFFLFlBQU07QUFDL0MsVUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFBO0FBQ3JCLFdBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBOztBQUUxQixZQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQ3JELENBQUMsQ0FBQTs7QUFFRixNQUFFLENBQUMsZ0NBQWdDLEVBQUUsWUFBTTtBQUN6QyxVQUFNLE9BQU8sR0FBRyxLQUFLLENBQUE7QUFDckIsV0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7O0FBRXZCLFlBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDbEQsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxDQUFBO0NBQ0gsQ0FBQyxDQUFBIiwiZmlsZSI6Ii9ob21lL2pnYXJyaXNvbi8uYXRvbS9wYWNrYWdlcy9sYXRleC9zcGVjL2xhdGV4LXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG5cbmltcG9ydCBoZWxwZXJzIGZyb20gJy4vc3BlYy1oZWxwZXJzJ1xuXG5kZXNjcmliZSgnTGF0ZXgnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PiB7XG4gICAgICByZXR1cm4gaGVscGVycy5hY3RpdmF0ZVBhY2thZ2VzKClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdpbml0aWFsaXplJywgKCkgPT4ge1xuICAgIGl0KCdpbml0aWFsaXplcyBhbGwgcHJvcGVydGllcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChsYXRleC5sb2dnZXIpLnRvQmVEZWZpbmVkKClcbiAgICAgIGV4cGVjdChsYXRleC5vcGVuZXIpLnRvQmVEZWZpbmVkKClcbiAgICAgIGV4cGVjdChsYXRleC5wcm9jZXNzKS50b0JlRGVmaW5lZCgpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnZ2V0RGVmYXVsdExvZ2dlcicsICgpID0+IHtcbiAgICBpdCgncmV0dXJucyBhbiBpbnN0YW5jZSBvZiBEZWZhdWx0TG9nZ2VyJywgKCkgPT4ge1xuICAgICAgY29uc3QgZGVmYXVsdExvZ2dlciA9IGxhdGV4LmdldERlZmF1bHRMb2dnZXIoKVxuXG4gICAgICBleHBlY3QoZGVmYXVsdExvZ2dlci5jb25zdHJ1Y3Rvci5uYW1lKS50b0JlKCdEZWZhdWx0TG9nZ2VyJylcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdMb2dnZXIgcHJveHknLCAoKSA9PiB7XG4gICAgbGV0IGxvZ2dlclxuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBsb2dnZXIgPSBqYXNtaW5lLmNyZWF0ZVNweU9iaignTW9ja0xvZ2dlcicsIFsnZXJyb3InLCAnd2FybmluZycsICdpbmZvJ10pXG4gICAgICBsYXRleC5zZXRMb2dnZXIobG9nZ2VyKVxuICAgICAgbGF0ZXguY3JlYXRlTG9nUHJveHkoKVxuICAgIH0pXG5cbiAgICBpdCgnY29ycmVjdGx5IHByb3hpZXMgZXJyb3IgdG8gZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGF0dXNDb2RlID0gMFxuICAgICAgY29uc3QgcmVzdWx0ID0geyBmb286ICdiYXInIH1cbiAgICAgIGNvbnN0IGJ1aWxkZXIgPSB7IHJ1biAoKSB7IHJldHVybiAnJyB9IH1cbiAgICAgIGxhdGV4LmxvZy5lcnJvcihzdGF0dXNDb2RlLCByZXN1bHQsIGJ1aWxkZXIpXG5cbiAgICAgIGV4cGVjdChsb2dnZXIuZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHN0YXR1c0NvZGUsIHJlc3VsdCwgYnVpbGRlcilcbiAgICB9KVxuXG4gICAgaXQoJ2NvcnJlY3RseSBwcm94aWVzIHdhcm5pbmcgdG8gd2FybmluZycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnZm9vJ1xuICAgICAgbGF0ZXgubG9nLndhcm5pbmcobWVzc2FnZSlcblxuICAgICAgZXhwZWN0KGxvZ2dlci53YXJuaW5nKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtZXNzYWdlKVxuICAgIH0pXG5cbiAgICBpdCgnY29ycmVjdGx5IHByb3hpZXMgaW5mbyB0byBpbmZvJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZSA9ICdmb28nXG4gICAgICBsYXRleC5sb2cuaW5mbyhtZXNzYWdlKVxuXG4gICAgICBleHBlY3QobG9nZ2VyLmluZm8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1lc3NhZ2UpXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=