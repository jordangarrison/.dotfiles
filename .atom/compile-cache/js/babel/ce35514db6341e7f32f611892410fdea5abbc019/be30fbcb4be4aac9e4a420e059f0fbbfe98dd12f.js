'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});
function getLocalMethods(tokens, editor) {
  var _this = this;

  return [].concat.apply([], tokens).reduce(function (memo, token) {
    var inc = token.scopes.includes.bind(token.scopes);
    if (memo.inMethod && !inc('meta.method.java')) {
      if (memo.method.signature.returnValue) {
        /* If there's no return value, then it's the constructor. */
        memo.methods.push(memo.method);
      }

      memo.method = { name: null, signature: { arguments: [], returnValue: null } };
      memo.inMethod = false;
    }

    /* If we're not in the identifier of a method, just return the memo. */
    if (!inc('meta.method.identifier.java') && !inc('meta.method.return-type.java')) {
      return memo;
    }

    memo.inMethod = true;
    if (inc('meta.method.return-type.java')) {
      memo.method.signature.returnValue = _this.getFullyQualifiedClass(editor, token.value) || token.value;
    }
    if (inc('entity.name.function.java')) {
      memo.method.name = token.value;
    }
    if (inc('meta.method.identifier.java') && (inc('storage.type.java') || inc('storage.type.primitive.java'))) {
      memo.method.signature.arguments.push(token.value);
    }

    return memo;
  }, {
    inMethod: false,
    method: { name: null, signature: { arguments: [], returnValue: null } },
    methods: []
  }).methods;
}

exports.getLocalMethods = getLocalMethods;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pnYXJyaXNvbi8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtamF2YS1taW51cy9saWIvZW50cnlmaW5kZXJzL2xvY2FsLW1ldGhvZHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7OztBQUVaLFNBQVMsZUFBZSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUU7OztBQUN2QyxTQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFLO0FBQ3pELFFBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckQsUUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7QUFDN0MsVUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUU7O0FBRXJDLFlBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztPQUNoQzs7QUFFRCxVQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDO0FBQzlFLFVBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0tBQ3ZCOzs7QUFHRCxRQUFJLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsRUFBRTtBQUMvRSxhQUFPLElBQUksQ0FBQztLQUNiOztBQUVELFFBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLFFBQUksR0FBRyxDQUFDLDhCQUE4QixDQUFDLEVBQUU7QUFDdkMsVUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLE1BQUssc0JBQXNCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO0tBQ3JHO0FBQ0QsUUFBSSxHQUFHLENBQUMsMkJBQTJCLENBQUMsRUFBRTtBQUNwQyxVQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0tBQ2hDO0FBQ0QsUUFBSSxHQUFHLENBQUMsNkJBQTZCLENBQUMsS0FBSyxHQUFHLENBQUMsbUJBQW1CLENBQUMsSUFBSSxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQSxBQUFDLEVBQUU7QUFDMUcsVUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDbkQ7O0FBRUQsV0FBTyxJQUFJLENBQUM7R0FDYixFQUFFO0FBQ0QsWUFBUSxFQUFFLEtBQUs7QUFDZixVQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ3ZFLFdBQU8sRUFBRSxFQUFFO0dBQ1osQ0FBQyxDQUFDLE9BQU8sQ0FBQztDQUNaOztRQUVRLGVBQWUsR0FBZixlQUFlIiwiZmlsZSI6Ii9ob21lL2pnYXJyaXNvbi8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtamF2YS1taW51cy9saWIvZW50cnlmaW5kZXJzL2xvY2FsLW1ldGhvZHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuZnVuY3Rpb24gZ2V0TG9jYWxNZXRob2RzKHRva2VucywgZWRpdG9yKSB7XG4gIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIHRva2VucykucmVkdWNlKChtZW1vLCB0b2tlbikgPT4ge1xuICAgIGNvbnN0IGluYyA9IHRva2VuLnNjb3Blcy5pbmNsdWRlcy5iaW5kKHRva2VuLnNjb3Blcyk7XG4gICAgaWYgKG1lbW8uaW5NZXRob2QgJiYgIWluYygnbWV0YS5tZXRob2QuamF2YScpKSB7XG4gICAgICBpZiAobWVtby5tZXRob2Quc2lnbmF0dXJlLnJldHVyblZhbHVlKSB7XG4gICAgICAgIC8qIElmIHRoZXJlJ3Mgbm8gcmV0dXJuIHZhbHVlLCB0aGVuIGl0J3MgdGhlIGNvbnN0cnVjdG9yLiAqL1xuICAgICAgICBtZW1vLm1ldGhvZHMucHVzaChtZW1vLm1ldGhvZCk7XG4gICAgICB9XG5cbiAgICAgIG1lbW8ubWV0aG9kID0geyBuYW1lOiBudWxsLCBzaWduYXR1cmU6IHsgYXJndW1lbnRzOiBbXSwgcmV0dXJuVmFsdWU6IG51bGwgfSB9O1xuICAgICAgbWVtby5pbk1ldGhvZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qIElmIHdlJ3JlIG5vdCBpbiB0aGUgaWRlbnRpZmllciBvZiBhIG1ldGhvZCwganVzdCByZXR1cm4gdGhlIG1lbW8uICovXG4gICAgaWYgKCFpbmMoJ21ldGEubWV0aG9kLmlkZW50aWZpZXIuamF2YScpICYmICFpbmMoJ21ldGEubWV0aG9kLnJldHVybi10eXBlLmphdmEnKSkge1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfVxuXG4gICAgbWVtby5pbk1ldGhvZCA9IHRydWU7XG4gICAgaWYgKGluYygnbWV0YS5tZXRob2QucmV0dXJuLXR5cGUuamF2YScpKSB7XG4gICAgICBtZW1vLm1ldGhvZC5zaWduYXR1cmUucmV0dXJuVmFsdWUgPSB0aGlzLmdldEZ1bGx5UXVhbGlmaWVkQ2xhc3MoZWRpdG9yLCB0b2tlbi52YWx1ZSkgfHwgdG9rZW4udmFsdWU7XG4gICAgfVxuICAgIGlmIChpbmMoJ2VudGl0eS5uYW1lLmZ1bmN0aW9uLmphdmEnKSkge1xuICAgICAgbWVtby5tZXRob2QubmFtZSA9IHRva2VuLnZhbHVlO1xuICAgIH1cbiAgICBpZiAoaW5jKCdtZXRhLm1ldGhvZC5pZGVudGlmaWVyLmphdmEnKSAmJiAoaW5jKCdzdG9yYWdlLnR5cGUuamF2YScpIHx8IGluYygnc3RvcmFnZS50eXBlLnByaW1pdGl2ZS5qYXZhJykpKSB7XG4gICAgICBtZW1vLm1ldGhvZC5zaWduYXR1cmUuYXJndW1lbnRzLnB1c2godG9rZW4udmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9LCB7XG4gICAgaW5NZXRob2Q6IGZhbHNlLFxuICAgIG1ldGhvZDogeyBuYW1lOiBudWxsLCBzaWduYXR1cmU6IHsgYXJndW1lbnRzOiBbXSwgcmV0dXJuVmFsdWU6IG51bGwgfSB9LFxuICAgIG1ldGhvZHM6IFtdXG4gIH0pLm1ldGhvZHM7XG59XG5cbmV4cG9ydCB7IGdldExvY2FsTWV0aG9kcyB9O1xuIl19