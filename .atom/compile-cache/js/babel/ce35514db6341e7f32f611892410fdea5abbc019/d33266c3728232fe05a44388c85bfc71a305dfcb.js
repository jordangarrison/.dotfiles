Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

var _atom = require('atom');

'use babel';

var Main = {
  disposables: null,
  languageListView: null,

  createLanguageListView: function createLanguageListView() {
    if (!this.languageListView) {
      var LanguageListView = require('./language-list-view');
      this.languageListView = new LanguageListView();
    }
    this.languageListView.toggle();
  },

  activate: function activate() {
    this.disposables = new _atom.CompositeDisposable();

    function warn() {
      atom.notifications.addWarning('spell-check package is enabled', { detail: 'spell-check and linter-spell will spell check the same\ndocuments and spell-check will interfere with linter-spell.\nPlease disable the spell-check package. If you do not want\nto see this warning you can disable it in the settings\nfor linter-spell.' });
    }

    if (atom.config.get('linter-spell.checkForSpellCheck') && atom.packages.isPackageActive('spell-check')) warn();

    atom.packages.onDidActivatePackage(function (p) {
      if (atom.config.get('linter-spell.checkForSpellCheck') && p.name === 'spell-check') warn();
    });

    var DictionaryProvider = require('./dictionary-provider');
    global.dictionaryProvider = new DictionaryProvider();
    this.disposables.add(global.dictionaryProvider);

    var LanguageManager = require('./language-manager');
    global.languageManager = new LanguageManager();
    this.disposables.add(global.languageManager);

    var GrammarManager = require('./grammar-manager');
    global.grammarManager = new GrammarManager();
    this.disposables.add(global.grammarManager);

    var DictionaryManager = require('./dictionary-manager');
    global.dictionaryManager = new DictionaryManager();
    this.disposables.add(global.dictionaryManager);

    global.providers = require('./providers');

    this.disposables.add(atom.commands.add('atom-text-editor', 'linter-spell:show-language-selector', this.createLanguageListView));

    require('atom-package-deps').install('linter-spell').then(function () {
      console.log('All dependencies installed, good to go');
    });
  },

  deactivate: function deactivate() {
    this.disposables.dispose();
  },

  consumeGrammar: function consumeGrammar(grammars) {
    return global.grammarManager.consumeGrammar(grammars);
  },

  consumeDictionary: function consumeDictionary(dictionaries) {
    return global.dictionaryManager.consumeDictionary(dictionaries);
  },

  consumeLinter: function consumeLinter(linter) {
    global.linter = linter;
    return new _atom.Disposable(function () {
      global.linter = null;
    });
  },

  consumeStatusBar: function consumeStatusBar(statusBar) {
    var LanguageStatusView = require('./language-status-view');
    var languageStatusView = new LanguageStatusView();
    languageStatusView.initialize(statusBar);
    return new _atom.Disposable(function () {
      languageStatusView.destroy();
    });
  },

  provideGrammar: function provideGrammar() {
    return global.providers.provideGrammar();
  },

  provideDictionary: function provideDictionary() {
    var _this = this;

    var wordList = require('linter-spell-word-list');

    var wordLists = [{
      name: 'plain text',
      keyPath: 'linter-spell.plainTextWords',
      grammarScopes: ['text.plain', 'text.plain.null-grammar']
    }, {
      name: 'GIT commit',
      keyPath: 'linter-spell.gitCommitWords',
      grammarScopes: ['text.git-commit']
    }, {
      name: 'AsciiDoc',
      keyPath: 'linter-spell.asciiDocWords',
      grammarScopes: ['source.asciidoc']
    }, {
      name: 'Markdown',
      keyPath: 'linter-spell.markdownWords',
      grammarScopes: ['source.gfm', 'text.md']
    }];

    return _.concat([global.dictionaryProvider.provideDictionary()], _.map(wordLists, function (opt) {
      var a = new wordList.ConfigWordList(opt);
      _this.disposables.add(a);
      return a.provideDictionary();
    }));
  },

  provideLinter: function provideLinter() {
    return global.providers.provideLinter();
  }

};

exports['default'] = Main;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,