function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _specHelpers = require('./spec-helpers');

var _specHelpers2 = _interopRequireDefault(_specHelpers);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libBuilder = require('../lib/builder');

var _libBuilder2 = _interopRequireDefault(_libBuilder);

var _libBuildState = require('../lib/build-state');

var _libBuildState2 = _interopRequireDefault(_libBuildState);

describe('Builder', function () {
  var builder = undefined,
      fixturesPath = undefined,
      filePath = undefined,
      logFilePath = undefined,
      fdbFilePath = undefined,
      state = undefined,
      jobState = undefined;

  beforeEach(function () {
    builder = new _libBuilder2['default']();
    fixturesPath = _specHelpers2['default'].cloneFixtures();
    filePath = _path2['default'].join(fixturesPath, 'file.tex');
    logFilePath = _path2['default'].join(fixturesPath, 'file.log');
    fdbFilePath = _path2['default'].join(fixturesPath, 'file.fdb_latexmk');
    state = new _libBuildState2['default'](filePath);
    state.setOutputDirectory('');
    jobState = state.getJobStates()[0];
  });

  describe('constructPath', function () {
    it('reads `latex.texPath` as configured', function () {
      spyOn(atom.config, 'get').andReturn();
      builder.constructPath();

      expect(atom.config.get).toHaveBeenCalledWith('latex.texPath');
    });

    it('uses platform default when `latex.texPath` is not configured', function () {
      var defaultTexPath = '/foo/bar';
      var expectedPath = [defaultTexPath, process.env.PATH].join(_path2['default'].delimiter);
      atom.config.set('latex.texPath', '');
      spyOn(builder, 'defaultTexPath').andReturn(defaultTexPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });

    it('replaces surrounded $PATH with process.env.PATH', function () {
      var texPath = '/foo:$PATH:/bar';
      var expectedPath = texPath.replace('$PATH', process.env.PATH);
      atom.config.set('latex.texPath', texPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });

    it('replaces leading $PATH with process.env.PATH', function () {
      var texPath = '$PATH:/bar';
      var expectedPath = texPath.replace('$PATH', process.env.PATH);
      atom.config.set('latex.texPath', texPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });

    it('replaces trailing $PATH with process.env.PATH', function () {
      var texPath = '/foo:$PATH';
      var expectedPath = texPath.replace('$PATH', process.env.PATH);
      atom.config.set('latex.texPath', texPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });

    it('prepends process.env.PATH with texPath', function () {
      var texPath = '/foo';
      var expectedPath = [texPath, process.env.PATH].join(_path2['default'].delimiter);
      atom.config.set('latex.texPath', texPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });
  });

  describe('parseLogFile', function () {
    var logParser = undefined;

    beforeEach(function () {
      logParser = jasmine.createSpyObj('MockLogParser', ['parse']);
      spyOn(builder, 'getLogParser').andReturn(logParser);
    });

    it('resolves the associated log file path by invoking @resolveLogFilePath', function () {
      spyOn(builder, 'resolveLogFilePath').andReturn('foo.log');

      builder.parseLogFile(jobState);
      expect(builder.resolveLogFilePath).toHaveBeenCalledWith(jobState);
    });

    it('does not attempt parse if passed a file path that does not exist', function () {
      state.setFilePath('/foo/bar/quux.tex');
      builder.parseLogFile(jobState);

      expect(logParser.parse).not.toHaveBeenCalled();
    });

    it('attempts to parse the resolved log file', function () {
      builder.parseLogFile(jobState);

      expect(builder.getLogParser).toHaveBeenCalledWith(logFilePath, filePath);
      expect(logParser.parse).toHaveBeenCalled();
    });
  });

  describe('parseFdbFile', function () {
    var fdbParser = undefined;

    beforeEach(function () {
      fdbParser = jasmine.createSpyObj('MockFdbParser', ['parse']);
      spyOn(builder, 'getFdbParser').andReturn(fdbParser);
    });

    it('resolves the associated fdb file path by invoking @resolveFdbFilePath', function () {
      spyOn(builder, 'resolveFdbFilePath').andReturn('foo.fdb_latexmk');

      builder.parseFdbFile(jobState);
      expect(builder.resolveFdbFilePath).toHaveBeenCalledWith(jobState);
    });

    it('does not attempt parse if passed a file path that does not exist', function () {
      state.setFilePath('/foo/bar/quux.tex');
      builder.parseFdbFile(jobState);

      expect(fdbParser.parse).not.toHaveBeenCalled();
    });

    it('attempts to parse the resolved fdb file', function () {
      builder.parseFdbFile(jobState);

      expect(builder.getFdbParser).toHaveBeenCalledWith(fdbFilePath);
      expect(fdbParser.parse).toHaveBeenCalled();
    });
  });

  describe('parseLogAndFdbFiles', function () {
    it('verifies that the correct output file is selected when using various latexmk modes', function () {
      var switches = [{
        name: 'pdf',
        format: 'pdf'
      }, {
        name: 'pdfdvi',
        format: 'pdf'
      }, {
        name: 'pdfps',
        format: 'pdf'
      }, {
        name: 'ps',
        format: 'ps'
      }, {
        name: 'dvi',
        format: 'dvi'
      }];
      state.setOutputDirectory('log-parse');

      for (var _ref2 of switches) {
        var _name = _ref2.name;
        var format = _ref2.format;

        state.setJobNames(['file-' + _name]);
        jobState = state.getJobStates()[0];
        builder.parseLogAndFdbFiles(jobState);
        expect(_path2['default'].basename(jobState.getOutputFilePath())).toBe(jobState.getJobName() + '.' + format, 'Select ' + format + ' file when using -' + _name + ' switch.');
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,